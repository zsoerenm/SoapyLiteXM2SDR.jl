using Scratch
using LibGit2
using soapysdr_jll
using Libdl
using CMake_jll
using GNUMake_jll
using GCCBootstrap_jll

# Include git helper functions
include("git_helper.jl")

# Use JLL packages for all build tools
const cmake_cmd = CMake_jll.cmake()
const make_cmd = GNUMake_jll.make()

# Set up GCC compiler environment from GCCBootstrap_jll
gcc_bin = joinpath(GCCBootstrap_jll.artifact_dir, "bin")
gcc_env = Dict{String,String}(
    "PATH" => gcc_bin * ":" * get(ENV, "PATH", ""),
    "CC" => joinpath(gcc_bin, "x86_64-linux-gnu-gcc"),
    "CXX" => joinpath(gcc_bin, "x86_64-linux-gnu-g++"),
    "AR" => joinpath(gcc_bin, "x86_64-linux-gnu-ar")
)

@info "Build tools:"
@info "  CMake: $(cmake_cmd)"
@info "  Make: $(make_cmd)"
@info "  GCC: $(gcc_env["CC"])"

println("Building SoapyLiteXM2SDR driver...")

# Get a scratch space for the build (use package-specific name to avoid collisions)
scratch_dir = @get_scratch!("SoapyLiteXM2SDR-build")
println("Using scratch directory: $scratch_dir")

# Clone or update the litex_m2sdr repository
# Using upstream repository - PR #84 has been merged with kernel 5.15 fixes
# Pin to specific commit for reproducibility
# Using commit 1f15d3f (merge of PR #84) which includes kernel 5.15 compatibility
# PR #84 adds: blk_opf_t typedef for kernel < 6.0, submit_bio fixes for kernel < 5.16
repo_url = "https://github.com/enjoy-digital/litex_m2sdr.git"
commit_hash = "1f15d3f0ca082b7df232ca698f9413ef9ca0d77f"
repo_dir = joinpath(scratch_dir, "litex_m2sdr")

repo = ensure_repository(repo_url, repo_dir, commit_hash)

# Build the user libraries (liblitepcie and libm2sdr)
println("\nBuilding user libraries...")
userdir = joinpath(repo_dir, "litex_m2sdr/software/user")

cd(userdir) do
    withenv(gcc_env...) do
        run(`$make_cmd INTERFACE=USE_LITEPCIE liblitepcie/liblitepcie.a libm2sdr/libm2sdr.a ad9361/libad9361_m2sdr.a`)
    end
end

liblitepcie_path = joinpath(userdir, "liblitepcie/liblitepcie.a")
libm2sdr_path = joinpath(userdir, "libm2sdr/libm2sdr.a")

if !isfile(liblitepcie_path) || !isfile(libm2sdr_path)
    error("Failed to build user libraries")
end

println("User libraries built successfully")

# Build the LitePCIe kernel driver
println("\nBuilding LitePCIe kernel driver...")
kernel_driver_dir = joinpath(repo_dir, "litex_m2sdr/software/kernel")

if isdir(kernel_driver_dir)
    # Build the kernel module in place (kernel build system expects this)
    # Don't copy - build directly in the source directory
    cd(kernel_driver_dir) do
        try
            # Clean any previous build artifacts first
            run(`$make_cmd clean`)

            # Build the kernel module
            run(`$make_cmd`)

            kernel_module_path = joinpath(kernel_driver_dir, "m2sdr.ko")
            if isfile(kernel_module_path)
                println("LitePCIe kernel driver built successfully")
                println("Kernel module location: $kernel_module_path")
            else
                @warn "Kernel module m2sdr.ko not found after build"
            end
        catch e
            @warn "Failed to build kernel driver. This is expected if kernel headers are not available." exception = e
            println("Kernel driver build skipped - hardware functionality will not be available")
        end
    end
else
    @warn "Kernel driver source not found at $kernel_driver_dir"
end

# Build the SoapySDR module
println("\nBuilding SoapySDR module...")
sourcedir = joinpath(repo_dir, "litex_m2sdr/software/soapysdr")
builddir = joinpath(scratch_dir, "build_soapy")
installdir = joinpath(scratch_dir, "install")

# Set up CMake paths
prefix = [soapysdr_jll.artifact_dir]
soapy_libdir = joinpath(soapysdr_jll.artifact_dir, "lib")

# Configure with CMake (with GCC environment)
withenv(gcc_env...) do
    run(```$cmake_cmd -B $builddir -S $sourcedir
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$installdir
            -DCMAKE_PREFIX_PATH="$(join(prefix, ";"))"
            -DCMAKE_INSTALL_RPATH="$soapy_libdir"
            -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON
            -DUSE_LITEETH=OFF
            ```)

    # Build
    run(```$cmake_cmd --build $builddir --parallel $(Sys.CPU_THREADS)```)

    # Install
    run(```$cmake_cmd --build $builddir --target install```)
end

# Verify the build
module_path = joinpath(installdir, "lib", "SoapySDR", "modules0.8", "libSoapyLiteXM2SDR." * Libdl.dlext)
if !isfile(module_path)
    error("SoapySDR module not found at expected location: $module_path")
end

println("\nBuild completed successfully!")
println("SoapySDR module installed at: $module_path")

# Save the installation path for the module to use
kernel_module_path = joinpath(kernel_driver_dir, "m2sdr.ko")
kernel_module_built = isfile(kernel_module_path)

open(joinpath(@__DIR__, "deps.jl"), "w") do io
    println(io, "# This file is automatically generated by deps/build.jl")
    println(io, "const module_path = \"$module_path\"")
    println(io, "const install_dir = \"$installdir\"")
    println(io, "const kernel_module_path = \"$kernel_module_path\"")
    println(io, "const kernel_module_built = $kernel_module_built")
end
