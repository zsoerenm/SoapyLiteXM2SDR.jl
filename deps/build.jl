using Scratch
using LibGit2
using soapysdr_jll
using Libdl
using CMake_jll
using GNUMake_jll
using GCCBootstrap_jll

# Use JLL packages for all build tools
const cmake_cmd = CMake_jll.cmake()
const make_cmd = GNUMake_jll.make()

# Set up GCC compiler environment from GCCBootstrap_jll
gcc_bin = joinpath(GCCBootstrap_jll.artifact_dir, "bin")
gcc_env = Dict{String,String}(
    "PATH" => gcc_bin * ":" * get(ENV, "PATH", ""),
    "CC" => joinpath(gcc_bin, "x86_64-linux-gnu-gcc"),
    "CXX" => joinpath(gcc_bin, "x86_64-linux-gnu-g++"),
    "AR" => joinpath(gcc_bin, "x86_64-linux-gnu-ar")
)

@info "Build tools:"
@info "  CMake: $(cmake_cmd)"
@info "  Make: $(make_cmd)"
@info "  GCC: $(gcc_env["CC"])"

println("Building SoapyLiteXM2SDR driver...")

# Get a scratch space for the build
scratch_dir = @get_scratch!("build")
println("Using scratch directory: $scratch_dir")

# Clone or update the litex_m2sdr repository
repo_url = "https://github.com/enjoy-digital/litex_m2sdr.git"
repo_dir = joinpath(scratch_dir, "litex_m2sdr")

if isdir(repo_dir)
    println("Repository already exists, updating...")
    repo = LibGit2.GitRepo(repo_dir)
    LibGit2.fetch(repo)
else
    println("Cloning repository from $repo_url...")
    LibGit2.clone(repo_url, repo_dir)
    repo = LibGit2.GitRepo(repo_dir)
end

# Pin to specific commit for reproducibility (from your build_tarballs.jl)
commit_hash = "086cf3c0922fc954ca578218678c4f7928ea5b84"
println("Checking out commit: $commit_hash")

# Reset to the specific commit
obj = LibGit2.GitObject(repo, commit_hash)
LibGit2.reset!(repo, obj, LibGit2.Consts.RESET_HARD)
println("Checked out commit: $commit_hash")

# Build the user libraries (liblitepcie and libm2sdr)
println("\nBuilding user libraries...")
userdir = joinpath(repo_dir, "litex_m2sdr/software/user")

cd(userdir) do
    withenv(gcc_env...) do
        run(`$make_cmd INTERFACE=USE_LITEPCIE liblitepcie/liblitepcie.a libm2sdr/libm2sdr.a ad9361/libad9361_m2sdr.a`)
    end
end

liblitepcie_path = joinpath(userdir, "liblitepcie/liblitepcie.a")
libm2sdr_path = joinpath(userdir, "libm2sdr/libm2sdr.a")

if !isfile(liblitepcie_path) || !isfile(libm2sdr_path)
    error("Failed to build user libraries")
end

println("User libraries built successfully")

# Build the SoapySDR module
println("\nBuilding SoapySDR module...")
sourcedir = joinpath(repo_dir, "litex_m2sdr/software/soapysdr")
builddir = joinpath(scratch_dir, "build_soapy")
installdir = joinpath(scratch_dir, "install")

# Set up CMake paths
prefix = [soapysdr_jll.artifact_dir]
soapy_libdir = joinpath(soapysdr_jll.artifact_dir, "lib")

# Configure with CMake (with GCC environment)
withenv(gcc_env...) do
    run(```$cmake_cmd -B $builddir -S $sourcedir
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_INSTALL_PREFIX=$installdir
            -DCMAKE_PREFIX_PATH="$(join(prefix, ";"))"
            -DCMAKE_INSTALL_RPATH="$soapy_libdir"
            -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON
            -DUSE_LITEETH=OFF
            ```)

    # Build
    run(```$cmake_cmd --build $builddir --parallel $(Sys.CPU_THREADS)```)

    # Install
    run(```$cmake_cmd --build $builddir --target install```)
end

# Verify the build
module_path = joinpath(installdir, "lib", "SoapySDR", "modules0.8", "libSoapyLiteXM2SDR." * Libdl.dlext)
if !isfile(module_path)
    error("SoapySDR module not found at expected location: $module_path")
end

println("\nBuild completed successfully!")
println("SoapySDR module installed at: $module_path")

# Save the installation path for the module to use
open(joinpath(@__DIR__, "deps.jl"), "w") do io
    println(io, "# This file is automatically generated by deps/build.jl")
    println(io, "const module_path = \"$module_path\"")
    println(io, "const install_dir = \"$installdir\"")
end
